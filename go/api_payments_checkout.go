/*
 * Subscription Manager
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package subscriptionManager

import (
	"log"
	"net/http"
	"subscriptionManager/db"
	"subscriptionManager/models"
	"subscriptionManager/util"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/stripe/stripe-go/v72"
	"github.com/stripe/stripe-go/v72/checkout/session"
	"github.com/stripe/stripe-go/v72/customer"
	"github.com/stripe/stripe-go/v72/sub"
)

func PaymentsCheckoutGet(c *gin.Context) {
	/**
	 * check authentication
	 */
	if IsApiAuthenticated(c) > 0 {
		http.Error(c.Writer, "Failed to authenticate.", http.StatusUnauthorized)
		return
	}
	price_id := c.Query("price_id") //get requst price id
	/**
	 * get stripe info from config
	 */
	config, err := util.LoadConfig(".")
	if err != nil {
		log.Fatal("cannot load config:", err)
	}
	stripe.Key = config.Stripe.StripeAPI
	CancelURL := config.Stripe.CancelURL
	SuccessURL := config.Stripe.SuccessURL

	user_id := GetUserId(c) //get user_id
	// check existing user_id
	var IsUser []models.UserPlans
	db.DB.Where("user_id", user_id).Find(&IsUser)
	if len(IsUser) > 0 {
		//check exsting user_id and price_id
		db.DB.Where("user_id", user_id).Where("price_id", price_id).Find(&IsUser)
		if len(IsUser) > 0 {
			/**
			 * 2. a user attempting to subscribe to the plan that s/he was already subscribed to
			 */
			c.JSON(http.StatusAlreadyReported, gin.H{
				"message": "Status 208",
			})
			return
		} else {
			/**
			 * 3.  a user switching to another plan (upgrade/downgrade)
			 */
			db.DB.Where("user_id", user_id).Find(&IsUser)
			subscription_id := IsUser[0].SubscriptionId // get subscription_id from user_plans table
			log.Println("subscription id---------", subscription_id)
			subscription, err := sub.Get(subscription_id, nil)
			log.Println("subscription error-------", err)
			params := &stripe.SubscriptionParams{
				CancelAtPeriodEnd: stripe.Bool(false),
				ProrationBehavior: stripe.String(string(stripe.SubscriptionProrationBehaviorCreateProrations)),
				Items: []*stripe.SubscriptionItemsParams{
					{
						ID:    stripe.String(subscription.Items.Data[0].ID),
						Price: stripe.String(price_id),
					},
				},
			}
			subscription, err = sub.Update(subscription_id, params)
			// update user_plans data (price_id, plan_id, last_modified_ts)
			var AvailablePlans []models.AvailablePlans
			db.DB.Where("price_id", price_id).Find(&AvailablePlans)
			new_plan_id := AvailablePlans[0].Id // get plan id accroding to new price_id
			db.DB.Where("user_id", user_id).Updates(models.UserPlans{PriceId: price_id, PlanId: new_plan_id, LastModifiedTs: time.Now()}).Find(&IsUser)

			// create new transaction data
			transaction_uuid := uuid.New()
			transaction_plane_id := IsUser[0].Id
			transaction := &models.Transactions{
				Id:         transaction_uuid.String(),
				UserId:     user_id,
				PriceId:    price_id,
				UserPlanId: transaction_plane_id,
				Status:     "PRICE_CHANGE",
				CreatedTs:  time.Now(),
			}
			db.DB.Create(&transaction)
			c.JSON(http.StatusOK, gin.H{
				"subscription": subscription,
			})
			return
		}
	} else {
		/**
		 * 1. a user subscribing to our service for the first time
		 */
		// create customer id
		c_params := &stripe.CustomerParams{
			Description: stripe.String(user_id),
		}
		cus, _ := customer.New(c_params)

		//create checkout session
		params := &stripe.CheckoutSessionParams{
			LineItems: []*stripe.CheckoutSessionLineItemParams{
				&stripe.CheckoutSessionLineItemParams{
					Price:    stripe.String(price_id),
					Quantity: stripe.Int64(1),
				},
			},
			Customer:   stripe.String(cus.ID), //add customer id from created customer data
			Mode:       stripe.String("subscription"),
			SuccessURL: stripe.String(SuccessURL),
			CancelURL:  stripe.String(CancelURL),
		}
		s, err := session.New(params)
		if err != nil {
			log.Println(err)
		}

		// create user plans data
		// user_uuid := uuid.New()
		// var plans []models.AvailablePlans
		// db.DB.Select("id").Where("price_id", price_id).Find(&plans)
		// plan_id := plans[0].Id
		// userPlans := &models.UserPlans{
		// 	Id:        user_uuid.String(),
		// 	PlanId:    int(plan_id),
		// 	UserId:    user_id,
		// 	PriceId:   price_id,
		// 	Status:    "CHECKOUT",
		// 	CreatedTs: time.Now(),
		// }
		// db.DB.Create(&userPlans)

		// // create transaction data
		// transaction_uuid := uuid.New()
		// transaction := &models.Transactions{
		// 	Id:         transaction_uuid.String(),
		// 	UserId:     user_id,
		// 	UserPlanId: user_uuid.String(),
		// 	SessionId:  s.ID,
		// 	PriceId:    price_id,
		// 	Status:     "CHECKOUT",
		// 	CreatedTs:  time.Now(),
		// }
		// db.DB.Create(&transaction)
		c.JSON(http.StatusOK, gin.H{
			"checkoutURL": s,
			"customer":    cus,
		})
		// c.Redirect(http.StatusFound, s.URL)
	}

}
