/*
 * Subscription Manager
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package subscriptionManager

import (
	"log"
	"net/http"
	"subscriptionManager/util"

	"github.com/gin-gonic/gin"
	"github.com/stripe/stripe-go/v72"
	"github.com/stripe/stripe-go/v72/checkout/session"
)

func PaymentsCheckoutGet(c *gin.Context) {
	// Check authentication
	if IsApiAuthenticated(c) > 0 {
		http.Error(c.Writer, "Failed to authenticate.", http.StatusUnauthorized)
		return
	}
	//get requst price id
	price_id := c.Query("price_id")
	log.Printf(price_id)
	//get stripe api key
	config, err := util.LoadConfig(".")
	if err != nil {
		log.Fatal("cannot load config:", err)
	}
	stripe.Key = config.Stripe.StripeAPI
	CancelURL := config.Stripe.CancelURL
	SuccessURL := config.Stripe.SuccessURL

	//create checkout session
	params := &stripe.CheckoutSessionParams{
		LineItems: []*stripe.CheckoutSessionLineItemParams{
			&stripe.CheckoutSessionLineItemParams{
				Price:    stripe.String(price_id),
				Quantity: stripe.Int64(1),
			},
		},
		Mode:       stripe.String("subscription"),
		SuccessURL: stripe.String(SuccessURL),
		CancelURL:  stripe.String(CancelURL),
	}
	s, err := session.New(params)
	if err != nil {
		log.Println(err)
	} else {
		log.Println(s.URL)
		// c.JSON(http.StatusOK, gin.H{
		// 	"checkoutURL": s.URL,
		// })
		c.Redirect(http.StatusFound, s.URL)
	}
}
